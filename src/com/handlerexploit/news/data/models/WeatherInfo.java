/*
 *  Copyright (c) 2011 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.news.data.models;

import java.io.Serializable;
import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@SuppressWarnings("serial")
public class WeatherInfo implements Serializable {
    
    private String city;
    private CurrentWeather currentWeather;
    private ArrayList<Condition> forcastConditions = new ArrayList<Condition>();
    
    public WeatherInfo(JSONObject jsonObject) throws JSONException {
        city = data(jsonObject.getJSONObject("forecast_information").getJSONObject("city"));
        currentWeather = new CurrentWeather(jsonObject.getJSONObject("current_conditions"));
        JSONArray jsonArray = jsonObject.getJSONArray("forecast_conditions");
        for (int i = 0; i < jsonArray.length(); i++) {
            forcastConditions.add(new Condition(jsonArray.getJSONObject(i)));
        }
    }
    
    public String getCity() {
        return city;
    }
    
    public CurrentWeather getCurrentWeather() {
        return currentWeather;
    }
    
    public ArrayList<Condition> getForcastConditions() {
        return forcastConditions;
    }
    
    public static class Condition implements Serializable {

        private String icon;
        private String condition;
        private String day;
        private String high;
        private String low;
        
        public Condition(JSONObject jsonObject) throws JSONException {
            icon = data(jsonObject.getJSONObject("icon")).replace("/ig/images/weather/", "").replace(".gif", "");
            condition = data(jsonObject.getJSONObject("condition"));
            day = data(jsonObject.getJSONObject("day_of_week"));
            high = data(jsonObject.getJSONObject("high"));
            low = data(jsonObject.getJSONObject("low"));
        }
        
        public String getIcon() {
            return icon;
        }
        
        public String getCondition() {
            return condition;
        }
        
        public String getDay() {
            return day;
        }
        
        public String getHigh() {
            return high;
        }
        
        public String getLow() {
            return low;
        }
    }
    
    public static class CurrentWeather implements Serializable {
        
        private String icon;
        private String condition;
        private String humidity;
        private String tempF;
        private String tempC;
        private String windCondition;
        
        public CurrentWeather(JSONObject jsonObject) throws JSONException {
            icon = data(jsonObject.getJSONObject("icon")).replace("/ig/images/weather/", "").replace(".gif", "");
            condition = data(jsonObject.getJSONObject("condition"));
            humidity = data(jsonObject.getJSONObject("humidity"));
            tempF = data(jsonObject.getJSONObject("temp_f"));
            tempC = data(jsonObject.getJSONObject("temp_c"));
            windCondition = data(jsonObject.getJSONObject("wind_condition"));
        }
        
        public String getIcon() {
            return icon;
        }
        
        public String getCondition() {
            return condition;
        }
        
        public String getHumidity() {
            return humidity;
        }
        
        public String getTempF() {
            return tempF;
        }
        
        public String getTempC() {
            return tempC;
        }
        
        public String getWindCondition() {
            return windCondition;
        }
    }
    
    private static String data(JSONObject jsonObject) throws JSONException {
        return jsonObject.getString("data");
    }
}