/*
 *  Copyright (c) 2012 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.news.data;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;

import org.apache.commons.codec.copy.binary.Base64;
import org.apache.commons.codec.copy.digest.DigestUtils;
import org.apache.commons.io.copy.IOUtils;
import org.apache.commons.lang.SerializationUtils;

import com.handlerexploit.common.utils.DiskLruCache;
import com.handlerexploit.common.utils.DiskLruCache.Editor;
import com.handlerexploit.common.utils.DiskLruCache.Snapshot;

/**
 * Proxy to {@link DiskLruCache} for compatibility
 */
public class FileManager<T extends Serializable> {

    private DiskLruCache mDiskLruCache;

    private int mTtlInMilliseconds = 0;

    public FileManager(String cacheDirectory) {
        try {
            mDiskLruCache = DiskLruCache.open(new File(cacheDirectory), 1, 1, Integer.MAX_VALUE);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public void setTtl(int minutes) {
        mTtlInMilliseconds = minutes * 60000;
    }

    @SuppressWarnings("unchecked")
    public T get(String rawKey) {
        Snapshot snapShot = null;
        try {
            String key = DigestUtils.sha256Hex(rawKey);
            snapShot = mDiskLruCache.get(key);
            if (snapShot != null) {
                String flatValue = snapShot.getString(0);
                if (flatValue != null) {
                    String[] raw = flatValue.split("\\|");
                    Long lastModified = Long.valueOf(raw[0]);
                    if (System.currentTimeMillis() < lastModified + mTtlInMilliseconds) {
                        return (T) SerializationUtils.deserialize(Base64.decodeBase64(raw[1]));
                    } else {
                        mDiskLruCache.remove(key);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(snapShot);
        }
        return null;
    }

    public void put(String rawKey, T value) {
        Editor editor = null;
        try {
            String key = DigestUtils.sha256Hex(rawKey);
            /*
             * We block here because Editor.edit will return null if another
             * edit is in progress
             */
            while (editor == null) {
                editor = mDiskLruCache.edit(key);
            }

            String flatValue = Base64.encodeBase64String(SerializationUtils.serialize(value));
            editor.set(0, System.currentTimeMillis() + "|" + flatValue);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (editor != null) {
                try {
                    editor.commit();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}