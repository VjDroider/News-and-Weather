/*
 *  Copyright (c) 2011 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.news.utils;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import android.content.Context;
import android.graphics.Bitmap;
import android.os.Handler;

public class ImageUtilities {
    
    private static BitmapLruCache mBitmapLruCache;
    
    private static ExecutorService mFileOperationsExecutor = Executors.newCachedThreadPool();
    
    private static ExecutorService mNetworkOperationsExecutor = Executors.newSingleThreadExecutor();

    /**
     * Simple synchronous method to retrieve an image Bitmap
     */
    public static Bitmap getImage(String path, Context context) {
        return getImage(path, true, true, context);
    }
    
    /**
     * Advanced synchronous method to retrieve an image Bitmap
     */
    public static Bitmap getImage(String path, boolean getFromServer, boolean useHardCache, Context context) {
        if (mBitmapLruCache == null) mBitmapLruCache = new BitmapLruCache(context);
        Bitmap bitmap = mBitmapLruCache.get(path);
        if (bitmap == null && getFromServer) {
            bitmap = BitmapLruCache.readBitmapFromNetwork(path);
            if (bitmap != null) {
                mBitmapLruCache.put(path, bitmap, useHardCache);
            }
        }
        return bitmap;
    }
    
    /**
     * Simple asynchronous method to retrieve an image Bitmap
     */
    public static void getImage(String path, Context context, OnImageReceivedListener listener) {
        getImage(path, true, context, listener);
    }
    
    /**
     * Advanced asynchronous method to retrieve an image Bitmap
     */
    public static void getImage(final String path, final boolean useHardCache, final Context context, final OnImageReceivedListener listener) {        
        mFileOperationsExecutor.execute(new UIRunnable(new Handler()) {
            public void run(Handler handler) {
                final Bitmap bitmap = getImage(path, false, false, context);
                if (bitmap != null) {
                    handler.post(new Runnable() {
                        public void run() {
                            listener.onReceived(path, bitmap);
                        }
                    });
                } else {
                    mNetworkOperationsExecutor.execute(new UIRunnable(handler) {
                        public void run(Handler handler) {
                            final Bitmap bitmap = getImage(path, true, useHardCache, context);
                            handler.post(new Runnable() {
                                public void run() {
                                    listener.onReceived(path, bitmap);
                                }
                            });
                        }
                    });
                }
            }
        });
    }
    
    /**
     * Simple listener interface for determining when a Bitmap is loaded
     */
    public interface OnImageReceivedListener {
        public void onReceived(String source, Bitmap bitmap);
    }
    
    /**
     * A Runnable implementation that unlike the standard Runnable,
     * returns a Handler to easily post to the main UI thread.
     */
    private static abstract class UIRunnable implements Runnable {
        
        private Handler handler;
        
        public UIRunnable(Handler handler) {
            this.handler = handler;
        }
        
        public abstract void run(Handler handler);

        @Override
        public void run() {
            run(handler);
        }
    }
}