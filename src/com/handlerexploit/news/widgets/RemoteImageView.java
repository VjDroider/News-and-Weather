/*
 *  Copyright (c) 2011 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.news.widgets;

import com.handlerexploit.news.utils.ImageUtilities;
import com.handlerexploit.news.utils.ImageUtilities.OnImageReceivedListener;

import android.content.Context;
import android.graphics.Bitmap;
import android.util.AttributeSet;
import android.widget.ImageView;

/**
 * This ImageView specializes in retrieving remote images.<br><br>
 * This class is thread save will work fluidly with the ViewHolder optimization pattern.
 * 
 * @author Daniel Huckaby
 */
public class RemoteImageView extends ImageView implements OnImageReceivedListener {
    
    private RemoteImageCallback mRemoteImageCallback;
    
    public RemoteImageView(Context context) {
        super(context);
    }

    public RemoteImageView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public RemoteImageView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    /**
     * Sets the content of this ImageView to the specified URL.
     * @param url The URL of a remote image
     */
    public final void setImageURL(String url) {
        if (url != null && url != super.getTag()) {
            super.setTag(url);
            super.setImageBitmap(null);
            ImageUtilities.getImage(url, true, getContext(), this);
        }
    }
    
    @Override
    public final void onReceived(String source, Bitmap bitmap) {
        if (bitmap != null && source == super.getTag()) {
            if (mRemoteImageCallback != null) {
                Bitmap processedBitmap = mRemoteImageCallback.onProcess(this, bitmap);
                if (processedBitmap != null && source == super.getTag()) {
                    super.setImageBitmap(processedBitmap);
                }
            } else {
                super.setImageBitmap(bitmap);
            }
        }
    }
    
    /**
     * This implementation does nothing
     */
    @Deprecated
    public final void setTag(Object tag) {
        // Do nothing
    }
    
    /**
     * This implementation returns null always
     */
    @Deprecated
    public final Object getTag() {
        return null;
    }
    
    public void setRemoteImageCallback(RemoteImageCallback callback) {
        mRemoteImageCallback = callback;
    }
    
    public static interface RemoteImageCallback {
        public Bitmap onProcess(RemoteImageView remoteImageView, Bitmap bitmap);
    }
}