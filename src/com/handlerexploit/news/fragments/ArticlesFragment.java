/*
 *  Copyright (c) 2011 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.news.fragments;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.handlerexploit.news.R;
import com.handlerexploit.news.adapters.ArticleAdapter;
import com.handlerexploit.news.data.ArticlesProvider;
import com.handlerexploit.news.data.ArticlesProvider.Articles;
import com.handlerexploit.news.data.ArticlesProvider.Section;
import com.handlerexploit.news.data.models.Article;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.ListFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.WrapperListAdapter;

public class ArticlesFragment extends ListFragment {
    
    private static ExecutorService threadPool = Executors.newSingleThreadExecutor();
    private static Handler handler = new Handler();
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setListAdapter(new ArticleAdapter(getActivity(), new Articles()));
    }
    
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_article_list, null);
    }
    
    @Override
    public void onResume() {
        super.onResume();
        threadPool.execute(new Runnable() {
            public void run() {
                Articles articles = ArticlesProvider.getArticles(Section.valueOf(getArguments().getString("section")));
                
                if (articles == null) {
                    return;
                }
                
                if (articles.size() > 0) {
                    ListAdapter listAdapter = getListAdapter();
                    if (listAdapter instanceof WrapperListAdapter) {
                        listAdapter = ((WrapperListAdapter) listAdapter).getWrappedAdapter();
                    }
                    
                    /*
                     * Although the below code may look bad it keeps all of the work off the main
                     * UI thread and keeps the list reloading quick and clean. This does not work
                     * well in all solutions because from now until we post the notifyDataSetChanged
                     * the backing adapter ArrayList is not consistent with what is being displayed to
                     * the user. This may only be a fraction of a millisecond but it should be noted.
                     */
                    
                    final ArticleAdapter adapter = (ArticleAdapter) listAdapter;
                    
                    adapter.setNotifyOnChange(false);
                    
                    adapter.clear();
                    
                    for (Article article : articles) {
                        adapter.add(article);
                    }
                    
                    adapter.setNotifyOnChange(true);
                    
                    handler.post(new Runnable() {
                        public void run() {
                            adapter.notifyDataSetChanged();
                        }
                    });
                } else {
                    threadPool.execute(this);
                }
            }
        });
    }
    
    @Override
    public void onListItemClick(ListView l, View v, int position, long id) {
        super.onListItemClick(l, v, position, id);
        ArticleAdapter adpater = (ArticleAdapter) getListAdapter();
        if (adpater != null) {
            startActivity(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(adpater.getItem(position).getLink())));
        }
    }
}