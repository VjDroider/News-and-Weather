/*
 *  Copyright (c) 2011 Daniel Huckaby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.handlerexploit.news.fragments;

import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

import com.handlerexploit.news.R;
import com.handlerexploit.news.data.WeatherProvider;
import com.handlerexploit.news.data.models.WeatherInfo;
import com.handlerexploit.news.data.models.WeatherInfo.Condition;
import com.handlerexploit.news.data.models.WeatherInfo.CurrentWeather;
import com.handlerexploit.news.widgets.RemoteImageView;

import android.app.Activity;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;

public class WeatherFragment extends Fragment {
    
    private static ExecutorService threadPool = Executors.newSingleThreadExecutor();
    private static Handler handler = new Handler();
    private static String location;
    
    @Override
    public void onResume() {
        super.onResume();
        
        Activity activity = getActivity();
        if (activity != null) {
            if (location == null) {
                ((LocationManager) activity.getSystemService(Context.LOCATION_SERVICE)).requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 2000l, 10f, new LocationListener() {
                    
                    @Override
                    public void onLocationChanged(Location location) {
                        double longitude = location.getLongitude();
                        double latitude = location.getLatitude();
                        
                        final String url = "http://maps.google.com/maps/geo?ll=" + latitude + "," + longitude;
                        threadPool.execute(new Runnable() {
                            public void run() {
                                try {
                                    String response = EntityUtils.toString(new DefaultHttpClient().execute(new HttpGet(url)).getEntity());
                                    JSONObject addressDetails = new JSONObject(response).getJSONArray("Placemark").getJSONObject(0).getJSONObject("AddressDetails");
                                    JSONObject locality = addressDetails.getJSONObject("Country").getJSONObject("AdministrativeArea").getJSONObject("Locality");
                                    
                                    String raw;
                                    if (locality.get("PostalCode") == null) {
                                        raw = locality.getString("LocalityName");
                                    } else {
                                        raw = locality.getJSONObject("PostalCode").getString("PostalCodeNumber");
                                    }
                                    
                                    WeatherFragment.location = raw;
                                    
                                    final WeatherInfo weatherInfo = WeatherProvider.getWeather(WeatherFragment.location);
                                    handler.post(new Runnable() {
                                        public void run() {
                                            render(weatherInfo);
                                        }
                                    });
                                    
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                } catch (ParseException e) {
                                    e.printStackTrace();
                                } catch (ClientProtocolException e) {
                                    e.printStackTrace();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    }

                    public void onStatusChanged(String provider, int status, Bundle extras) {}
                    public void onProviderEnabled(String provider) {}
                    public void onProviderDisabled(String provider) {}
                });
            } else {
                threadPool.execute(new Runnable() {
                    public void run() {
                        final WeatherInfo weatherInfo = WeatherProvider.getWeather(location);
                        handler.post(new Runnable() {
                            public void run() {
                                render(weatherInfo);
                            }
                        });
                    }
                });
            }
        }
    }
    
    private void render(WeatherInfo weatherInfo) {
        Activity activity = getActivity();
        if (activity != null) {
            TextView city = (TextView) activity.findViewById(R.id.city);
            city.setText(weatherInfo.getCity());
            
            CurrentWeather currentWeather = weatherInfo.getCurrentWeather();
            
            RemoteImageView icon = (RemoteImageView) activity.findViewById(R.id.icon);
            icon.setImageURL(currentWeather.getIcon());
            
            TextView temp = (TextView) activity.findViewById(R.id.temp);
            temp.setText(currentWeather.getTempF() + " \u00B0F | " + currentWeather.getTempC() + " \u00B0C");
            
            TextView condition = (TextView) activity.findViewById(R.id.condition);
            condition.setText(currentWeather.getCondition());
            
            TextView windCondition = (TextView) activity.findViewById(R.id.windCondition);
            windCondition.setText(currentWeather.getWindCondition());
            
            TextView humidity = (TextView) activity.findViewById(R.id.humidity);
            humidity.setText(currentWeather.getHumidity());
            
            LinearLayout forcastConditions = (LinearLayout) activity.findViewById(R.id.forcastConditions);
            forcastConditions.removeAllViews();
            
            LayoutInflater inflater = LayoutInflater.from(activity);
            LinearLayout.LayoutParams params = new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
            params.weight = 1f;
            
            ArrayList<Condition> forcastArray = weatherInfo.getForcastConditions();
            for (int i = 0; i < forcastArray.size(); i++) {
                Condition forcastCondition = forcastArray.get(i);
                View root = inflater.inflate(R.layout.weather_condition_item, null);
                
                TextView forcastDay = (TextView) root.findViewById(R.id.day);
                forcastDay.setText(forcastCondition.getDay());
                
                RemoteImageView forcastIcon = (RemoteImageView) root.findViewById(R.id.icon);
                forcastIcon.setImageURL(forcastCondition.getIcon());
                
                TextView forcastHigh = (TextView) root.findViewById(R.id.high);
                forcastHigh.setText(forcastCondition.getHigh() + "\u00B0");
                
                TextView forcastLow = (TextView) root.findViewById(R.id.low);
                forcastLow.setText(forcastCondition.getLow() + "\u00B0");
                
                forcastConditions.addView(root, params);
            }
        }
    }
    
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.weather_main, null);
    }
}